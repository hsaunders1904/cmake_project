#!groovy

import groovy.json.JsonSlurper

def getBranchName() {
    def json = new JsonSlurper().parseText(env.payload)
    return "pull/" + json.pull_request.number + "/merge"
}

def getGitRemote() {
    def json = new JsonSlurper().parseText(env.payload)
    return json.pull_request.base.repo.clone_url
}

def getGitHubStatusUrl() {
    def json = new JsonSlurper().parseText(env.payload)
    return json.pull_request.statuses_url
}

def getGitHubPrNumber() {
    def json = new JsonSlurper().parseText(env.payload)
    return json.pull_request.number
}

def getHeadSha() {
    def json = new JsonSlurper().parseText(env.payload)
    return json.pull_request.head.sha
}

def genGitNotifyUrl(int status) {
    String context = "Jenkins Build and Test"
    String status_string
    if (status == 0) {
        status_string = "state=error&description=Error+occurred+in+build&context=$context"
    }
    if(status == 1) {
        status_string = "state=success&descirption=Build+succeeded&context=$context"
    }
    return getGitHubStatusUrl() + "?" + status_string
}

def postGitHubCommitStatus(String message, String state) {
    step([
        $class: "GitHubCommitStatusSetter",
        reposSource: [$class: "ManuallyEnteredRepositorySource", url: getGitRemote()],
        contextSource: [$class: "ManuallyEnteredCommitContextSource", context: "Jenkins Linux"],
        errorHandlers: [
            [$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]
        ],
        statusResultSource: [
            $class: "ConditionalStatusResultSource", results: [
                [$class: "AnyBuildResult", message: message, state: state]
            ]
        ]
    ]);
}

pipeline {
    agent any

    stages {

        stage('Checkout') {
            steps {
                deleteDir()
                echo 'Checkout stage...'
                sh """
                    git init . &&
                    git remote add origin ${getGitRemote()} &&
                    git fetch origin ${getBranchName()}:pr-${getGitHubPrNumber()} &&
                    git checkout pr-${getGitHubPrNumber()} &&
                    echo "Head is at \$(git log --oneline -n 1)"
                """
            }
        }

        stage('Build') {
            steps {
                echo 'Build stage...'
                sh '''
                    cd build/
                    cmake ..
                    cmake --build .
                '''
            }
        }

        stage('Test') {
            steps {
                echo 'Test stage...'
                sh '''
                    cd build
                    ctest
                '''
            }
        }
    }

    post {
        always {
            deleteDir()
        }
        success {
            postGitHubCommitStatus("Build succeeded", "SUCCESS")
        }
    }
}
