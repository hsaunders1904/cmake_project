#!groovy

import groovy.json.JsonSlurper

def getBranchName() {
    def json = new JsonSlurper().parseText(env.payload)
    return "pull/" + json.pull_request.number + "/merge"
}

def getGitRemote() {
    def json = new JsonSlurper().parseText(env.payload)
    return json.pull_request.base.repo.git_url
}

def getGitHubStatusUrl() {
    def json = new JsonSlurper().parseText(env.payload)
    return json.pull_request.statuses_url
}

def getGitHubPrNumber() {
    def json = new JsonSlurper().parseText(env.payload)
    return json.pull_request.number
}

def genGitNotifyUrl(int status) {
    String context = "Jenkins Build and Test"
    String status_string
    if (status == 0) {
        status_string = "state=error&description=Error+occurred+in+build&context=$context"
    }
    if(status == 1) {
        status_string = "state=success&descirption=Build+succeeded&context=$context"
    }
    return getGitHubStatusUrl() + "?" + status_string
}

pipeline {
    agent any

    stages {

        stage('Checkout') {
            steps {
                echo 'Checkout stage...'
                sh """
                    git clone ${getGitRemote()} &&
                    git fetch ${getGitRemote()} ${getBranchName()}:pr-${getGitHubPrNumber()} &&
                    git checkout pr-${getGitHubPrNumber()}
                """
            }
        }

        stage('Build') {
            steps {
                echo 'Build stage...'
                sh '''
                    cd build/
                    cmake ..
                    cmake --build .
                '''
            }
        }

        stage('Test') {
            steps {
                echo 'Test stage...'
                sh '''
                    cd build
                    ctest
                '''
            }
        }
   }
}
