#!groovy

import groovy.json.JsonSlurper

github_json = new JsonSlurper().parseText(env.payload)
String git_remote = json.pull_request.base.repo.clone_url
String git_pr_number = json.pull_request.number

// json object are not serializable, so Jenkins does not allow them to live
// for long. Set github_json to null to avoid the error
github_json = null


def postGitHubCommitStatus(String message, String state) {
    step([
        $class: "GitHubCommitStatusSetter",
        reposSource: [$class: "ManuallyEnteredRepositorySource", url: git_remote],
        contextSource: [$class: "ManuallyEnteredCommitContextSource", context: "Jenkins Linux"],
        errorHandlers: [
            [$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]
        ],
        statusResultSource: [
            $class: "ConditionalStatusResultSource", results: [
                [$class: "AnyBuildResult", message: message, state: state]
            ]
        ]
    ]);
}

postGitHubCommitStatus("Build in progress", "PENDING")

pipeline {
    agent any

    stages {

        stage('Checkout') {
            steps {
                deleteDir()

                echo 'Checkout stage...'
                sh """
                    git init . &&
                    git remote add origin ${git_remote} &&
                    git fetch origin pull/${git_pr_number}/merge:pr-${git_pr_number} &&
                    git checkout pr-${git_pr_number} &&
                    echo "Head is at \$(git log --oneline -n 1)"
                """
            }
        }

        stage('Build') {
            steps {
                echo 'Build stage...'
                sh '''
                    cd build/
                    cmake ..
                    cmake --build .
                '''
            }
        }

        stage('Test') {
            steps {
                echo 'Test stage...'
                sh '''
                    cd build
                    ctest
                '''
            }
        }
    }

    post {
        always {
            deleteDir()
        }
        success {
            postGitHubCommitStatus("Build succeeded", "SUCCESS")
        }
        failure {
            postGitHubCommitStatus("Build failed", "FAILURE")
        }
    }
}
